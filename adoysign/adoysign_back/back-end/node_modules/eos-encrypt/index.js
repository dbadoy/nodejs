"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var eosjs_ecc_1 = require("eosjs-ecc");
var lodash_padstart_1 = __importDefault(require("lodash.padstart"));
var long_1 = __importDefault(require("long"));
exports.MEMO = "TO DECRYPT: eos-encrypt\n";
/**
 * Encrypt Message
 *
 * @param {string} private_key EOSIO Private Key
 * @param {string} public_key EOSIO Public Key
 * @param {string} message Message to Encrypt
 * @param {object} [options={}] Optional parameters
 * @param {string} [options.memo="TO DECRYPT: eos-encrypt\n"] Serialized Memo
 * @param {number} [options.maxsize=256] Maximum character message size
 * @returns {string} Encrypted Message
 * @example
 *
 * const encrypted = encrypt(private_key, public_key, message);
 */
function encrypt(private_key, public_key, message, options) {
    if (options === void 0) { options = {}; }
    var memo = options.memo ? options.memo : exports.MEMO;
    var maxsize = options.maxsize ? options.maxsize : 256;
    var buff = eosjs_ecc_1.Aes.encrypt(private_key, public_key, message);
    var str = serialize(buff, memo);
    if (maxsize !== -1 && str.length > maxsize) {
        throw new Error("message too long (max " + maxsize + " chars)");
    }
    return str;
}
exports.encrypt = encrypt;
/**
 * Decrypt Message
 *
 * @param {string} private_key EOSIO Private Key
 * @param {string} public_key EOSIO Public Key
 * @param {string} message Encrypted Message
 * @param {object} [options={}] Optional parameters
 * @param {string} [options.memo="TO DECRYPT: eos-encrypt\n"] Serialized Memo
 * @returns {string} Decrypted Message
 * @example
 *
 * const decrypted = decrypt(private_key, public_key, message);
 */
function decrypt(private_key, public_key, message, options) {
    if (options === void 0) { options = {}; }
    var memo = options.memo ? options.memo : exports.MEMO;
    var _a = deserialize(message, memo), nonce = _a.nonce, content = _a.content, checksum = _a.checksum;
    var decrypted = eosjs_ecc_1.Aes.decrypt(private_key, public_key, nonce, content, checksum);
    return decrypted.toString("utf8");
}
exports.decrypt = decrypt;
/**
 * Serialize
 *
 * @private
 * @param {Crypt} buff Aes.encrypt => Object
 * @param {string} [memo="TO DECRYPT: eos-encrypt\n"] Serialized Memo
 * @returns {string} Serialized String
 * @example
 *
 * const buff = Aes.encrypt(private_key, public_key, message);
 * const str = serialize(buff);
 */
function serialize(buff, memo) {
    if (memo === void 0) { memo = exports.MEMO; }
    var str = memo;
    str += lodash_padstart_1.default(buff.nonce.low.toString(), 11, ".");
    str += lodash_padstart_1.default(buff.nonce.high.toString(), 11, ".");
    str += lodash_padstart_1.default(buff.checksum.toString(), 11, ".");
    str += buff.message.toString("base64");
    return str;
}
exports.serialize = serialize;
/**
 * Deserialize
 *
 * @private
 * @param {string} message Message to deserialize
 * @param {string} [memo="TO DECRYPT: eos-encrypt\n"] Serialized Memo
 * @returns {Object} Deserialize Object
 * @example
 *
 * const { nonce, content, checksum } = deserialize(message);
 * const decrypted = Aes.decrypt(private_key, public_key, nonce, content, checksum);
 */
function deserialize(message, memo) {
    if (memo === void 0) { memo = exports.MEMO; }
    message = message.replace(memo, "");
    var low = parseInt(message.substring(0, 11).replace(/[.]/g, ""), 10);
    var high = parseInt(message.substring(11, 22).replace(/[.]/g, ""), 10);
    var checksum = parseInt(message.substring(22, 33).replace(/[.]/g, ""), 10);
    message = message.substring(33, message.length);
    return {
        checksum: checksum,
        content: Buffer.from(message, "base64"),
        nonce: new long_1.default(low, high, false),
    };
}
exports.deserialize = deserialize;
/**
 * Set Default Memo
 *
 * @param {string} memo Set Memo
 * @returns {void}
 * @example
 *
 * setMemo("TO DECRYPT: my-dapp\n");
 */
function setMemo(memo) {
    exports.MEMO = memo;
}
exports.setMemo = setMemo;
